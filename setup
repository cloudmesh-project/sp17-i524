#!/usr/bin/env bash

set -o errexit                  # exit on failure

declare DEST                    # one of paper1, paper2, project
declare USER_ID                 # the homework ID or project ID
declare OUTDIR                  # the directory that will be created.

################################################################ Usage info

usage() {
cat <<EOF
USAGE:
  ./setup <TYPE> <ID>

This script generates the scaffolding for working on the paper or
projects. Input parameters:

1) TYPE: one of "paper1", "paper2", or "project"
2) ID: this is your HID for the papers or PID for the project

EXAMPLES:

  1) Setup for paper 1 using my HID:
    ./setup paper1 S17-EX-0000

  2) Setup for the project using my PID
    ./setup project S17-P-0000
EOF
}


################################################################ Argument checking

# Fail if bad number of arguments
case $# in
    2);;
    *)
        echo "ERROR: invalid invocation: $0 $@"
        echo
        usage
        exit 1
        ;;
esac

################ check arguments
DEST="$1"
USER_ID="$2"

# sanity check the DEST and declare TYPE
case $DEST in
    paper[1-2])
        declare -r TYPE=paper
        ;;
    project)
        declare -r TYPE=project
        ;;
    *)
        echo "ERROR: Unsupported type $DEST"
        echo
        usage
        exit 2
        ;;
esac

################ sanity check that the USER_ID is correct
case $TYPE in
    paper)
        case $USER_ID in
            S17-??-????);;
            *)
                declare -r TYPE_MISMATCH_ERROR=0;;
        esac
esac

if [ $TYPE_MISMATCH_ERROR ]; then
    echo "ERROR: User ID '$USER_ID' is not supported for type $TYPE."
    echo "ERROR: Check your ID"
    echo
    usage
    exit 3;
fi


################ ensure that no previous work has been done already
OUTDIR=$DEST/$USER_ID

if [ -d $OUTDIR ]; then
    echo "ERROR: Destination already exists: $OUTDIR"
    echo "Make sure you specified TYPE correctly. You used: $DEST"
    exit 4
fi


################################################################ 

## cross platform support

mymktemp() {
    ## `mktemp` works differently on linux and os x
    ## The REAL issue is that Mac comes with BSD mktemp while Linux has GNU mktemp
    ## These each support different flags.
    ##
    ## While checking with `uname` is not really the best option, it has caught most cases.
    ##
    ## Tested on
    ## [x] macOS 10.12
    ## [x] Linux
    ## [ ] Windows with Cygwin
    ## [ ] Windows with Ubuntu

    case $(uname) in
        Linux|Cygwin)
            mktemp $@;;
        Darwin)
            mktemp -t 'tmp' $@;;
        *)
            echo "ERROR: unsupported platform $(uname)"
            echo "Please file a bug at https://github.com/cloudmesh/sp17-i524/issues"
            exit 3
            ;;
    esac
}


################################################################
declare -r TMPDIR=$(mymktemp -d)

cleanup() {
    rm -rf "$TMPDIR"
}

trap cleanup EXIT


find_dir_contents() {
    local -r path="$1"
    shift
    find "$path" -maxdepth 1 ! -path "$path" $@
}


git-clone-directory() {
    # Retrieve a specific directory from a git repository
    # NOTE: this strips the history
    local -r url="$1"
    local -r dir="$2"
    local -r dst="$3"

    git clone --depth 1 --recursive "$url" "$dst"
    cd "$dst"

    ## the pipe into read is due to `mv` on macOS not supporting `-t`
    find_dir_contents "$dir"    -print0 | xargs -0 -n 1 | while read path; do mv "$path" "$TMPDIR"; done
    find_dir_contents .         -print0 | xargs -0      rm -rf
    find_dir_contents "$TMPDIR" -print0 | xargs -0 -n 1 | while read path; do mv "$path" "$PWD"; done

    rm -f *.docx

}

declare -r CLASS=git://github.com/cloudmesh/classes.git
declare -r DIRECTORY=docs/source/format/report

git-clone-directory $CLASS ./$DIRECTORY $OUTDIR

echo "DONE: $OUTDIR"
